#include <assert.h>
#include <dirent.h>
#include <errno.h>
#include <fcntl.h>
#include <inttypes.h>
#include <memory.h>
#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <sys/inotify.h>

#define MAXCOUNT 500

int process_inotifyevent(int fd)
{
	int count = 0;
	struct inotify_event *event;
	struct inotify_event  * cur ;
	char buf[MAXCOUNT];


	count =read(fd,buf,MAXCOUNT);

	// 读取出来的数据量小于一个event事件，error
	if(count < sizeof(*event))
	{
		printf("error event\n");
		return -1;
	}

	cur = (struct inotify_event  *) buf;

	while(count >= sizeof(*event))
	{

		if(cur->len > 0)  {
			printf("have event\n");
			if(cur->mask & IN_CREATE)

				printf("create file,file name = %s\n",cur->name);

			if(cur->mask & IN_DELETE)

				printf("delete file,file name = %s\n",cur->name);
		}
		else
			printf("no  event\n");

		count -=  sizeof(*event);
		cur += 1;
	}

	return 0;
}


int main(int argc, char** argv)
{
	int mINotifyFd=0;

	mINotifyFd = inotify_init();
	inotify_add_watch(mINotifyFd, "/tmp", IN_DELETE | IN_CREATE);//监听tmp目录下的 delete、create事件

	while(1) {
		process_inotifyevent(mINotifyFd);
	}

	return 0;
}
